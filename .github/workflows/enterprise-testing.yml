name: Enterprise AI Platform - Testing & Deployment

# Trigger on pushes to main and pull requests
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run platform health checks daily at 2 AM UTC
    - cron: '0 2 * * *'

# Set environment variables
env:
  DOTNET_VERSION: '8.0'
  PYTHON_VERSION: '3.11'

jobs:
  # Job 1: Enterprise Platform Testing
  enterprise-platform:
    name: Enterprise AI Platform Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install frontend dependencies
      run: |
        cd ui
        npm ci
        
    - name: Install backend dependencies
      run: dotnet restore backend/EnterprisePlatformApi.csproj
      
    - name: Run ESLint
      run: |
        cd ui
        npm run lint
        
    - name: Run Prettier check
      run: |
        cd ui
        npm run format -- --check
        
    - name: TypeScript type checking
      run: |
        cd ui
        npm run type-check
        
    - name: .NET code analysis
      run: |
        cd backend
        dotnet build --no-restore --verbosity normal
        
    # Security scanning
    - name: Run npm audit
      run: |
        cd ui
        npm audit --audit-level moderate
        
    - name: Run .NET security scan
      run: |
        dotnet list backend/EnterprisePlatformApi.csproj package --vulnerable --include-transitive

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests with Coverage
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install frontend dependencies
      run: |
        cd ui
        npm ci
        
    - name: Install backend dependencies
      run: dotnet restore backend/EnterprisePlatformApi.csproj
      
    - name: Run frontend unit tests
      run: |
        cd ui
        npm run test:unit -- --coverage --watchAll=false
        
    - name: Run backend unit tests
      run: |
        cd backend
        dotnet test --collect:"XPlat Code Coverage" --logger trx
        
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ui/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        
    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: backend/TestResults/*/coverage.cobertura.xml
        flags: backend
        name: backend-coverage

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: enterprise_platform_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install backend dependencies
      run: dotnet restore backend/EnterprisePlatformApi.csproj
      
    - name: Run integration tests
      run: |
        cd backend
        dotnet test --filter Category=Integration --logger trx
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=enterprise_platform_test;Username=postgres;Password=postgres"

  # Job 4: Accessibility & E2E Tests
  accessibility-e2e-tests:
    name: Accessibility & E2E Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install frontend dependencies
      run: |
        cd ui
        npm ci
        
    - name: Install backend dependencies
      run: dotnet restore backend/EnterprisePlatformApi.csproj
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Build frontend
      run: |
        cd ui
        npm run build
        
    - name: Start backend server
      run: |
        cd backend
        dotnet run --project EnterprisePlatformApi.csproj &
        echo "Backend started"
        
    - name: Start frontend server
      run: |
        cd ui
        npm start &
        echo "Frontend started"
        
    - name: Wait for servers
      run: |
        # Wait for backend
        timeout 60 bash -c 'until curl -f http://localhost:5000/api/health; do sleep 2; done'
        # Wait for frontend
        timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        
    - name: Run accessibility tests
      run: npx playwright test --grep="accessibility|a11y" --reporter=html,github
      
    - name: Run enterprise-specific tests
      run: npx playwright test --grep="enterprise" --reporter=html,github
      
    - name: Run cross-browser tests
      run: npx playwright test --project="chromium" --project="firefox" --project="webkit" --reporter=html,github
      
    - name: Run mobile accessibility tests
      run: npx playwright test --project="Mobile Chrome" --project="Mobile Safari" --reporter=html,github
      
    - name: Run high contrast tests
      run: npx playwright test --project="high-contrast" --reporter=html,github
      
    - name: Run screen reader simulation tests
      run: npx playwright test --project="screen-reader" --reporter=html,github
      
    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
        
    - name: Upload accessibility results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: accessibility-results
        path: test-results/
        retention-days: 30

  # Job 5: Performance Tests
  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    needs: accessibility-e2e-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install dependencies
      run: |
        cd ui
        npm ci
        npm install -g lighthouse
        
    - name: Install backend dependencies
      run: dotnet restore backend/EnterprisePlatformApi.csproj
      
    - name: Build and start services
      run: |
        # Build frontend
        cd ui
        npm run build
        cd ..
        
        # Start backend
        cd backend
        dotnet run --project EnterprisePlatformApi.csproj &
        cd ..
        
        # Start frontend
        cd ui
        npm start &
        cd ..
        
        # Wait for services
        timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        
    - name: Run Lighthouse CI
      run: |
        lighthouse http://localhost:3000 --chrome-flags="--headless" --output json --output-path lighthouse-report.json
        
    - name: Check Core Web Vitals
      run: |
        # Use Lighthouse results to verify Core Web Vitals meet accessibility standards
        node -e "
          const report = require('./lighthouse-report.json');
          const scores = report.lhr.categories;
          
          console.log('Performance Score:', scores.performance.score * 100);
          console.log('Accessibility Score:', scores.accessibility.score * 100);
          
          if (scores.accessibility.score < 0.95) {
            console.error('Accessibility score below 95%');
            process.exit(1);
          }
          
          if (scores.performance.score < 0.8) {
            console.error('Performance score below 80%');
            process.exit(1);
          }
        "
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: lighthouse-report.json

  # Job 6: Security & Penetration Testing
  security-tests:
    name: Security & Penetration Tests
    runs-on: ubuntu-latest
    needs: performance-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run OWASP ZAP scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:3000'
        
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --path=ui --severity-threshold=high

  # Job 7: Build & Deploy (Production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [accessibility-e2e-tests, performance-tests, security-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install dependencies
      run: |
        cd ui
        npm ci
        
    - name: Build frontend
      run: |
        cd ui
        npm run build
        
    - name: Build backend
      run: |
        cd backend
        dotnet publish -c Release -o publish
        
    - name: Deploy to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "ui/build"
        api_location: "backend/publish"
        
    - name: Deploy backend to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'enterprise-platform-api'
        slot-name: 'production'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: backend/publish

  # Job 8: Post-deployment verification
  post-deployment-verification:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Playwright
      run: |
        npm install -g @playwright/test
        npx playwright install chromium
        
    - name: Run smoke tests on production
      run: |
        npx playwright test --config=playwright.prod.config.ts --grep="smoke" --reporter=github
      env:
        BASE_URL: https://enterprise-platform.your-domain.com
        
    - name: Verify accessibility on production
      run: |
        npx lighthouse https://enterprise-platform.your-domain.com --chrome-flags="--headless" --only-categories=accessibility --output json
        
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

# Summary job to check overall status
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, accessibility-e2e-tests, performance-tests, security-tests]
    if: always()
    
    steps:
    - name: Generate test summary
      run: |
        echo "## 🧪 Enterprise Platform Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Results:" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Accessibility & E2E: ${{ needs.accessibility-e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Tests: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Enterprise Testing Focus:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ WCAG 2.2 AA Compliance" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Enterprise Security Standards" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Cross-browser Compatibility" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Mobile-first Design" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ High Contrast Support" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Screen Reader Compatibility" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Performance Optimization" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security Standards" >> $GITHUB_STEP_SUMMARY
